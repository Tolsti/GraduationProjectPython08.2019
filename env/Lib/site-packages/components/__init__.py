import functools

from ._compat import getfullargspec  # PY2


class Component(object):

    @classmethod
    def initialize(component_class):
        component_class.arguments = component_class.get_call_arguments()
        component_class.opening_token = component_class.get_opening_token()
        component_class.closing_token = component_class.get_closing_token()
        return component_class

    @classmethod
    def get_call_arguments(component_class):
        spec = getfullargspec(component_class.__init__)
        params = spec.args[1:]
        varargs, varkw, defaults, kwonly, kwonly_defaults = spec[1:6]
        return params, varargs, varkw, defaults, kwonly, kwonly_defaults

    @classmethod
    def get_opening_token(component_class):
        return component_class.__name__

    @classmethod
    def get_closing_token(component_class):
        return "End" + component_class.opening_token

    @classmethod
    def as_tag(component_class):
        from .contrib.django import component_tag

        component_class.initialize()
        result = functools.partial(component_tag, component_class)
        result.__name__ = component_class.opening_token
        return result
