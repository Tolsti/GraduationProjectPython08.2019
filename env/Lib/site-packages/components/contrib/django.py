from __future__ import absolute_import  # PY2

from django import VERSION
from django.template.base import NodeList, VariableNode
from django.template.library import TagHelperNode, parse_bits
from django.template.loader import get_template


if VERSION < (2, 0):
    # In Django 1.11 and earlier `parse_bits` function does not accept
    # `kwonly ` and ` kwonly_defaults` arguments.
    PARSE_BITS_ARITY = 8
else:
    PARSE_BITS_ARITY = 10


ARGUMENTS_OFFSET = PARSE_BITS_ARITY - 4


def component_tag(component_class, parser, token):
    get_compiled_template(component_class)
    # Tag arguments.
    bits = token.split_contents()[1:]
    arguments = component_class.arguments[:ARGUMENTS_OFFSET]
    takes_context = False
    function_name = component_class.opening_token
    args, kwargs = parse_bits(
        *(parser, bits) + arguments + (takes_context, function_name)  # PY2
    )
    # Tag body.
    if component_class.has_child_node:
        child_nodelist = parser.parse(parse_until=[component_class.closing_token])
        parser.delete_first_token()
    else:
        child_nodelist = None
    return ComponentNode(component_class, args, kwargs, child_nodelist)


class ComponentNode(TagHelperNode):

    def __init__(self, component_class, args, kwargs, child_nodelist):
        super(ComponentNode, self).__init__(  # PY2
            func=None, takes_context=False, args=args, kwargs=kwargs
        )
        self.component_class = component_class
        self.child_nodelist = child_nodelist
        if child_nodelist:
            self.result_nodelist = self.merge_child_nodes()
        else:
            self.result_nodelist = component_class.compiled_template.nodelist

    def render(self, context):
        resolved_args, resolved_kwargs = self.get_resolved_arguments(context)
        component = self.component_class(*resolved_args, **resolved_kwargs)
        with context.push():
            context["self"] = component
            return self.result_nodelist.render(context)

    def merge_child_nodes(self):
        component_nodelist = self.component_class.compiled_template.nodelist
        child_nodelist = self.child_nodelist
        result_nodelist = NodeList()
        for node in component_nodelist:
            if is_child_node(node):
                result_nodelist.extend(child_nodelist)
            else:
                result_nodelist.append(node)
        return result_nodelist


def get_compiled_template(component_class):
    try:  # PY2
        assert not component_class.compiled_template.engine.debug
    except (AttributeError, AssertionError):
        # Either tag used first time or DEBUG setting force as to
        # recompile it on each run.
        compiled = get_template(component_class.template)
        component_class.compiled_template = compiled.template
        component_class.has_child_node = has_child_node(component_class)


def has_child_node(component_class):
    for node in component_class.compiled_template:
        if is_child_node(node):
            return True


def is_child_node(node):
    return isinstance(node, VariableNode) and node.filter_expression.token == "child"
